#!/bin/bash -eu

user=$(whoami)
rsync="rsync -au --info=flist0,stats0"
script_linux_dir="$(cd "$( dirname "${BASH_SOURCE[0]}")" && pwd)"
script_dir="$(dirname "$script_linux_dir")"

service_exists() {
    service --status-all 2> /dev/null | grep ' '"$1"'$' > /dev/null
}

restore=0
delete=0
root_tasks=1
copy_dirlinks_for_home=0

while [ $# -ne 0 ]; do
    case $1 in
    --restore)
        restore=1
        shift
    ;;
    --delete)
        rsync="$rsync --delete"
        delete=1
        shift
    ;;
    --no-root)
        # An option for turning the tasks which require root off.
        root_tasks=0
        shift
    ;;
    -v)
        rsync="$rsync -v"
        shift
    ;;
    --bwlimit=*)
        rsync="$rsync $1"
        shift
    ;;
    --copy-dirlinks-for-home)
        copy_dirlinks_for_home=1
        shift
    ;;
    --)
        shift
        break
    ;;
    -?*)
        echo "Invalid argument: $1" 1>&2
        exit 1
    ;;
    *)
        break
    ;;
    esac
done

if [ $# -eq 0 ] || [ -z "$1" ]; then
    echo "Please provide a destination directory." 1>&2
    exit 1
fi

dest_dir="$1"

if [ ! -d "$dest_dir" ]; then
    echo "$dest_dir does not exist!" 1>&2
    exit 1
fi

if [ "$dest_dir" == '/' ]; then
    echo "/ cannot be used as a destination directory!" 1>&2
    exit 1
fi

root_actions() {
    if ((restore)); then
        local from_dir="$dest_dir"
        local to_dir="/"
    else
        local from_dir="/"
        local to_dir="$dest_dir"
    fi

    echo 'Syncing apt packages' 1>&2

    if ((restore)); then
        # rsync apt sources first, so we know where to install from.
        $root_rsync \
            --include='/' \
            --include='/etc/' \
            --include='/etc/apt/' \
            --include='/etc/apt/sources.list.d/' \
            --include='/etc/apt/sources.list.d/*' \
            --exclude='*' \
            "$from_dir/" "$to_dir/"

        if [ -f "$dest_dir/apt-keys" ]; then
            # Import all of the public keys we saved.
            apt-key add "$dest_dir/apt-keys"
        fi

        if [ -f "$dest_dir/apt-packages" ]; then
            # Install the list of apt packages.
            apt-get update
            # shellcheck disable=SC2002
            apt-get install --force-yes -y "$(cat "$dest_dir/apt-packages" | tr "\n" ' ')"
        fi

        # Install rsync if needed when restoring files.
        if ! command -v rsync > /dev/null; then
            apt-get install -y rsync
        fi
    fi

    # rsync some parts of /
    echo 'Syncing /' 1>&2
    $root_rsync \
        --include='/' \
        --include='/content' \
        --include='/etc/' \
        --include='/etc/apt/' \
        --include='/etc/apt/sources.list.d/' \
        --include='/etc/apt/sources.list.d/*' \
        --include='/etc/fuse.conf' \
        --include='/etc/hosts' \
        --include='/etc/jellyfin/' \
        --include='/etc/jellyfin/**' \
        --include='/etc/network/' \
        --include='/etc/network/interfaces' \
        --include='/etc/samba/' \
        --include='/etc/samba/*' \
        --include='/etc/ssh/' \
        --include='/etc/ssh/sshd_config' \
        --include='/etc/ssmtp/' \
        --include='/etc/ssmtp/*' \
        --include='/usr/' \
        --include='/usr/share/' \
        --include='/usr/share/jellyfin/' \
        --include='/usr/share/jellyfin/**' \
        --include='/var/' \
        --include='/var/cache/' \
        --include='/var/cache/jellyfin/' \
        --include='/var/cache/jellyfin/**' \
        --include='/var/lib/' \
        --include='/var/lib/NetworkManager/' \
        --include='/var/lib/NetworkManager/**' \
        --include='/var/lib/jellyfin/' \
        --include='/var/lib/jellyfin/**' \
        --exclude='*' \
        "$from_dir/" "$to_dir/"

    if ((restore)); then
        if service_exists ssh; then
            # Restart SSH to apply new settings.
            service ssh restart
        fi

        chmod -f 755 /etc/network
        chmod -f 644 /etc/network/interfaces
    fi
}

if ((restore)); then
    # Non-root system restore tasks should go here.
    true
else
    # Output the full list of public keys for apt.
    apt-key exportall > "$dest_dir/apt-keys"

    # Output the full list of packages installed through apt.
    apt-mark showmanual > "$dest_dir/apt-packages"
fi

if ((root_tasks)); then
    if ((restore)); then
        root_rsync="$rsync"
    else
        root_rsync="$rsync --chown=$user:$user"
    fi

    export restore
    export root_rsync
    export dest_dir
    export user

    # Run the root backup commands.
    su root --shell /bin/bash -- -euc "$(declare -f service_exists); $(declare -f root_actions); root_actions"
fi

if ((restore)); then
    from_home_dir="$dest_dir/home/$user/"
    to_home_dir="$HOME"
    home_rsync="$rsync --chown=$user:$user"
else
    from_home_dir="$HOME"
    to_home_dir="$dest_dir/home/$user/"
    home_rsync="$rsync"

    # For the /home/ backup, also delete any excluded files when backing up
    # the /home/ directory
    if ((delete)); then
        home_rsync="$home_rsync --delete-excluded"
    fi

    mkdir -p "$to_home_dir"
fi

if ((copy_dirlinks_for_home)); then
    home_rsync="$home_rsync --copy-dirlinks"
fi

# Take additional excludes from the home directory, if available.
if [ -f "$from_home_dir/.rsync_excludes" ]; then
    home_rsync="$home_rsync"' --exclude-from='"$from_home_dir/.rsync_excludes"
fi

# TODO: find a way to backup Waydroid.
# rsync the /home/ directory.
echo 'Syncing /home/' 1>&2
$home_rsync \
    --exclude-from="$script_dir/home_rsync_excludes" \
    "$from_home_dir/" "$to_home_dir/"

if ((restore)); then
    echo 'Fixing some file modes...' 1>&2
    # Fix some user file modes.
    chmod -f 700 ~/.ssh
    chmod -f 644 ~/.ssh/authorized_keys
fi

echo 'Syncing crontab' 1>&2

if ((restore)); then
    if [ -f "$dest_dir/home/$user/.crontab" ]; then
        # Restore crontab
        crontab "$dest_dir/home/$user/.crontab"
    fi
else
    # Output crontab to the destination directory.
    crontab -l > "$dest_dir/home/$user/.crontab" || true
fi
