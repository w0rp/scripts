#!/usr/bin/env bash
set -euo pipefail

TUNCTL_CMD="${TUNCTL_CMD:-tunblkctl}"
EXPECT_CMD="${EXPECT_CMD:-expect}"

if ! command -v "$TUNCTL_CMD" >/dev/null 2>&1; then
    echo 'Error: tunblkctl is not installed or not in your PATH' >&2
    echo >&2
    echo 'Use brew install azhuchkov/tools/tunblkctl' >&2
    exit 1
fi

get_otp() {
    local item_name="${VPN_1PASSWORD_ITEM_NAME:?'Error: VPN_1PASSWORD_ITEM_NAME is not set'}"

    if ! command -v op >/dev/null 2>&1; then
        echo 'Error: 1Password CLI (op) is not installed or not in your PATH' >&2
        exit 1
    fi

    if ! otp=$(op item get --format=json "$item_name" \
                  | grep -m1 -o '"totp": *"[0-9]\+"' \
                  | sed 's/[^0-9]//g'
    ); then
        echo "Error: could not fetch OTP from 1Password item: $item_name" >&2
        exit 1
    fi

    printf '%s' "$otp"
}

main() {
    local vpn_name="${VPN_NAME:?'Error: VPN_NAME is not set'}"
    local code
    code="$(get_otp)"

    echo "Using OTP: $code"

    # 1. Disconnect any existing tunnels (ignore errors)
    echo 'Disconnecting all active connections...'
    "$TUNCTL_CMD" disconnect --all || true

    # 2. Launch the connection in the background
    "$TUNCTL_CMD" connect --wait "$vpn_name" &

    # 3. Brief pause to let the Tunnelblick window appear
    sleep 1

    # 4. Use AppleScript to fill the GUI prompt
    osascript <<EOF
tell application "System Events"
    -- make sure Tunnelblick is frontmost
    tell process "Tunnelblick"
        set frontmost to true
        -- fill the password field (second text field) and click "OK"
        set value of text field 2 of window 1 to "$code"
        click button "OK" of window 1
    end tell
end tell
EOF

    # 5. Wait for tunblkctl to finish
    wait
}

main
