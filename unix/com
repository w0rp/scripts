#!/usr/bin/env bash

set -eu

# Require gitlint for validating commits
if ! command -v gitlint > /dev/null; then
    echo 'You must install gitlint: pip install --break-system-packages gitlint' 1>&2
    exit 1
fi

dir="$PWD"
has_commitlint=0

# Search upwards for .commitlintrc.json
# Use this to figure out if we're using commitlint or not.
while [ "$dir" != "/" ]; do
    if [ -f "$dir/.commitlintrc.json" ]; then
        has_commitlint=1
        break
    fi

    # FIXME: do a loop through all configs
    # https://commitlint.js.org/reference/configuration.html
    if [ -f "$dir/.commitlintrc.yaml" ]; then
        has_commitlint=1
        break
    fi

    parent="${dir%/*}"

    if [ "$parent" = "$dir" ]; then
        break
    fi

    dir="$parent"
done


# Require commitlint for conventional commit validation
if ((has_commitlint)) && ! command -v commitlint > /dev/null; then
    echo 'You must install commitlint' 1>&2
    echo 'npm install -g @commitlint/cli @commitlint/config-conventional' 1>&2
    exit 1
fi

if [ $# -ne 0 ] && [ "$1" ]; then
    message="$1"

    if ! echo "$message" | gitlint --ignore B6,T5,T8; then
        echo '' 1>&2
        echo 'Fix the gitlint errors above.' 1>&2
        exit 1
    fi

    # If we use `com wip` then replace the message with one that passes
    # commitlint, if needed.
    if ((has_commitlint)) && [ "$message" = 'wip' ]; then
        message='chore(temp): wip'
    fi

    if ((has_commitlint)) && ! echo "$message" | commitlint; then
        echo '' 1>&2
        echo 'Fix the commitlint errors above.' 1>&2
        exit 1
    fi

    git commit -m "$message"
else
    git commit
fi
