#!/bin/bash -eu

# A script for moving Django migrations files around, from another git branch.
#
# Given a branch name and an app name, this script will figure out which
# migration files have been added, and re-arrange the migration files
# so they come after migration files added in the other branch.

if ! [ $# -eq 2 ] || [ -z "$1" ] || [ -z "$2" ]; then
    echo "Usage: move-migrations <from_branch> <app_name>" 1>&2
    exit 1
fi

# Set up and validate the arguments.
branch_name="$1"
app_name="${2%/}"

if [[ ! "$app_name" =~ ^[a-zA-Z][a-zA-Z_0-9]*$ ]]; then
    echo "Invalid app name: $app_name" 1>&2
    exit 1
fi

if ! git rev-parse --verify "$branch_name" > /dev/null; then
    echo "Invalid branch name: $branch_name" 1>&2
    exit 1
fi

# Try to find the migration dir in either a sub directory or the main one.
migration_dir="$app_name/migrations"

for subdir in $(/bin/ls -1r); do
    if [ -d "$subdir/$migration_dir" ]; then
        migration_dir="$subdir/$migration_dir"
        break
    fi
done

cd "$migration_dir"

# A command for finding migrations added in this branch
added_migrations="git diff --name-only --diff-filter=A --relative $branch_name --"
last_moved_file=''

# A function for finding the last migration file.
find_last_migration() {
    local last_filename
    local last_file_found=0

    if [ "$last_moved_file" != '' ]; then
        # We have already moved a file before, so use that one.
        echo "$last_moved_file"
        return 0
    fi

    # We haven't moved any files yet, so find the last file which isn't ours.
    for last_filename in $(/bin/ls -1r); do
        if ! [[ "$last_filename" == *.py ]]; then
            # Skip files which aren't Python files.
            continue
        fi

        if [ "$last_filename" == '__init__.py' ]; then
            # Skip __init__.py
            continue
        fi

        # If this file isn't ours, then it's the last file.
        if ! [[ $($added_migrations "$last_filename") ]]; then
            last_file_found=1
            break
        fi
    done

    if ! [ $last_file_found -eq 1 ]; then
        echo "Failed to find the last migration file! Stopping here." 1>&2
        exit 1
    fi

    echo "$last_filename"
}

# Try to find the last migration straight away, so we can fail early.
find_last_migration > /dev/null

for filename in $($added_migrations .); do
    end_filename=$(find_last_migration)
    end_migration_name="${end_filename::${#end_filename} - 3}"

    migration_name="${filename::${#filename} - 3}"

    # Extract the suffix and the number.
    # shellcheck disable=SC2001
    migration_suffix=$(echo "$migration_name" | sed 's/^[0-9]*//')
    migration_number=$(echo "$end_filename" | grep -o '^[0-9]\+')
    # Increment the number 1 past the end.
    # shellcheck disable=SC2003
    migration_number=$(printf '%04d' "$(expr "$migration_number" + 1)")

    # Build the new migration name and filename.
    new_migration_name="$migration_number$migration_suffix"
    new_filename="$new_migration_name.py"

    if [ "$filename" == "$new_filename" ]; then
        echo 'There is nothing to move.' 1>&2
        exit 0
    fi

    echo "Moving migration $filename" 1>&2

    # Move the migration forward now.
    mv "$filename" "$new_filename"

    # Find where the dependency lines start and end, to limit sed to
    # editing only those lines.
    start_line=$(grep -n 'dependencies *=' "$new_filename" | head -1 | cut -d : -f 1)
    end_offset=$(tail -n "+$start_line" "$new_filename" | grep -n '\]' | head -1 | cut -d : -f 1)
    # shellcheck disable=SC2003
    end_line=$(expr "$start_line" + "$end_offset")

    # Fix the dependencies.
    sed -i.bak "${start_line},${end_line}s/('$app_name', '[^']*')/('$app_name', '$end_migration_name')/" "$new_filename"; rm -f "$new_filename".bak
    # Replace instances of the migration name that appear in the file.
    sed -i.bak "s/$migration_name/$new_migration_name/g" "$new_filename"; rm -f "$new_filename".bak

    # Use this moved file as the last moved file.
    last_moved_file="$new_filename"
done

# Now add all of the changes.
git add -A .

echo 'Migrations moved. Check git diff --cached.'
echo 'Commit the changes if you are happy with them.'
