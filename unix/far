#!/bin/bash

if [ -z "$3" ]; then
    echo 'Usage: far <regex> <substitution> [<directory> ...]' 1>&2
    exit 1
fi

# FIXME: Check for and recommend install of gnu-sed instead.
export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"

# Determine the flag to use for extended regex.
if [ "$(echo 'a' | sed -r 's/(a)/b/')" != 'b' ]; then
    # This is GNU sed, so use -r.
    r='-r'
else
    # This is BSD sed, so use -E.
    r='-E'
fi

function escape-slashes() {
    echo "$1" | sed $r 's/\\\//\//g' | sed $r 's/\//\\\//g'
}

# Check that the escaping function actually works.
if [ "$(escape-slashes '\//\//')" != '\/\/\/\/' ]; then
    echo 'escape-slashes produces the wrong output!'
    exit 1
fi

# Escape the slashes in the regex and the substitution so it can be
# thrown in-between the forward slash boundaries below.
regex="$(escape-slashes "$1")"
sub="$(escape-slashes "$2")"

# Do not run find if the regular expression is invalid.
if ! echo '' | sed $r "s/$regex/$sub/g" &> /dev/null; then
    echo 'Invalid regular expression' 1>&2
    exit 1
fi

# Find every file in the tail argument directories, etc and replace shit.
find "${@:3}" -type f -exec sed $r "s/$regex/$sub/g" -i {} \;
